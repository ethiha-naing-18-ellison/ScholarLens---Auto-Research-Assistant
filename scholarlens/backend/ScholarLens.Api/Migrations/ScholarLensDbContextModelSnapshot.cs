// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScholarLens.Api.Data;

#nullable disable

namespace ScholarLens.Api.Migrations
{
    [DbContext(typeof(ScholarLensDbContext))]
    partial class ScholarLensDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScholarLens.Api.Models.PaperText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SearchResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SearchResultId")
                        .IsUnique();

                    b.ToTable("paper_texts", (string)null);
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HtmlPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PdfPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParametersJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ParametersJson"), "gin");

                    b.HasIndex("TopicId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("ScholarLens.Api.Models.SearchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("AuthorsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doi")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsOpenAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("PdfUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RawJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Venue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorsJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AuthorsJson"), "gin");

                    b.HasIndex("Doi")
                        .IsUnique()
                        .HasFilter("doi IS NOT NULL");

                    b.HasIndex("RawJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("RawJson"), "gin");

                    b.HasIndex("TopicId");

                    b.HasIndex("Year");

                    b.ToTable("search_results", (string)null);
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KeyPointsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("LimitationsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Methods")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Results")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("SearchResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("TlDr")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("KeyPointsJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("KeyPointsJson"), "gin");

                    b.HasIndex("LimitationsJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("LimitationsJson"), "gin");

                    b.HasIndex("SearchResultId")
                        .IsUnique();

                    b.ToTable("summaries", (string)null);
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("YearFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("YearTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("ScholarLens.Api.Models.PaperText", b =>
                {
                    b.HasOne("ScholarLens.Api.Models.SearchResult", "SearchResult")
                        .WithOne("PaperText")
                        .HasForeignKey("ScholarLens.Api.Models.PaperText", "SearchResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchResult");
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Report", b =>
                {
                    b.HasOne("ScholarLens.Api.Models.Topic", "Topic")
                        .WithMany("Reports")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ScholarLens.Api.Models.SearchResult", b =>
                {
                    b.HasOne("ScholarLens.Api.Models.Topic", "Topic")
                        .WithMany("SearchResults")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Summary", b =>
                {
                    b.HasOne("ScholarLens.Api.Models.SearchResult", "SearchResult")
                        .WithOne("Summary")
                        .HasForeignKey("ScholarLens.Api.Models.Summary", "SearchResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchResult");
                });

            modelBuilder.Entity("ScholarLens.Api.Models.SearchResult", b =>
                {
                    b.Navigation("PaperText");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("ScholarLens.Api.Models.Topic", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("SearchResults");
                });
#pragma warning restore 612, 618
        }
    }
}
